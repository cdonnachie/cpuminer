name: Build cpuminer-opt Windows

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to attach binaries to'
        required: false
        default: 'latest'

env:
  # MSYS2 dependencies
  MSYS2_DEPS: base-devel autotools automake autoconf libtool mingw-w64-x86_64-toolchain mingw-w64-x86_64-curl mingw-w64-x86_64-openssl mingw-w64-x86_64-jansson mingw-w64-x86_64-gmp mingw-w64-i686-toolchain mingw-w64-i686-curl mingw-w64-i686-openssl mingw-w64-i686-jansson mingw-w64-i686-gmp zip

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Basic SSE2 build
          - arch: x86_64-sse2
            cflags: "-march=core2 -msse2"
            suffix: "windows-x86_64-sse2"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"
          # AVX builds
          - arch: x86_64-avx
            cflags: "-march=corei7-avx -maes"
            suffix: "windows-x86_64-avx"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"
          # AVX2 builds
          - arch: x86_64-avx2
            cflags: "-march=core-avx2 -maes"
            suffix: "windows-x86_64-avx2"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"
          # AVX2 with AES and SHA extensions
          - arch: x86_64-avx2-aes
            cflags: "-march=core-avx2 -maes -msha"
            suffix: "windows-x86_64-avx2-aes"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"
          # AVX2 with SHA and VAES (newer CPUs)
          - arch: x86_64-avx2-sha-vaes
            cflags: "-march=core-avx2 -maes -msha -mvaes"
            suffix: "windows-x86_64-avx2-sha-vaes"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"
          # AVX512 builds
          - arch: x86_64-avx512
            cflags: "-march=skylake-avx512 -maes"
            suffix: "windows-x86_64-avx512"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"
          # AVX512 with SHA and VAES
          - arch: x86_64-avx512-sha-vaes
            cflags: "-march=skylake-avx512 -maes -msha -mvaes"
            suffix: "windows-x86_64-avx512-sha-vaes"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"
          # AES-specific optimized build
          - arch: x86_64-aes-sse42
            cflags: "-march=westmere -msse4.2 -maes"
            suffix: "windows-x86_64-aes-sse42"
            mingw_env: "MINGW64"
            mingw_arch: "x86_64"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.mingw_env }}
          update: true
          install: ${{ env.MSYS2_DEPS }}

      - name: Generate build files
        shell: msys2 {0}
        run: |
          ./autogen.sh

      - name: Configure build
        shell: msys2 {0}
        run: |
          CFLAGS="-O3 ${{ matrix.cflags }} -Wall -flax-vector-conversions" \
          ./configure --with-curl

      - name: Build
        shell: msys2 {0}
        run: |
          make -j$(nproc)

      - name: Strip binary
        shell: msys2 {0}
        run: |
          strip cpuminer.exe

      - name: Rename binary
        shell: msys2 {0}
        run: |
          mv cpuminer.exe cpuminer-${{ matrix.suffix }}.exe

      - name: Collect dependencies
        shell: msys2 {0}
        run: |
          mkdir -p release-files
          cp cpuminer-${{ matrix.suffix }}.exe release-files/

          # Copy required DLLs using ldd to find dependencies
          ldd cpuminer-${{ matrix.suffix }}.exe | grep -i mingw | awk '{print $3}' | xargs -I {} cp {} release-files/ || true

          # Copy common required DLLs manually to ensure we have them
          cp /${{ matrix.mingw_env }}/bin/libcurl-4.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/libssl-3-x64.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/libcrypto-3-x64.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/libjansson-4.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/libgmp-10.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/libwinpthread-1.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/libgcc_s_seh-1.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/libstdc++-6.dll release-files/ || true
          cp /${{ matrix.mingw_env }}/bin/zlib1.dll release-files/ || true

          # List what we collected
          echo "Files in release package:"
          ls -la release-files/

      - name: Create release archive
        shell: msys2 {0}
        run: |
          cd release-files
          zip -r ../cpuminer-${{ matrix.suffix }}.zip *

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cpuminer-${{ matrix.suffix }}-complete
          path: cpuminer-${{ matrix.suffix }}.zip
          retention-days: 30

  test-basic-windows:
    needs: [build-windows]
    runs-on: windows-latest
    steps:
      - name: Download Windows SSE2 artifact
        uses: actions/download-artifact@v4
        with:
          name: cpuminer-windows-x86_64-sse2-complete

      - name: Extract and test
        run: |
          7z x cpuminer-windows-x86_64-sse2.zip
          ./cpuminer-windows-x86_64-sse2.exe --help

  create-windows-release:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [build-windows, test-basic-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all Windows artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./windows-artifacts
          pattern: cpuminer-windows-*-complete

      - name: Create consolidated Windows archive
        run: |
          mkdir -p cpuminer-windows-all
          cd windows-artifacts
          for dir in */; do
            unzip -o -j "$dir"*.zip -d ../cpuminer-windows-all/
          done
          cd ..
          zip -r cpuminer-windows-all-variants.zip cpuminer-windows-all/

      - name: Upload consolidated Windows release
        uses: softprops/action-gh-release@v1
        with:
          files: cpuminer-windows-all-variants.zip
          tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
